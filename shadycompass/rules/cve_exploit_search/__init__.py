from abc import ABC

from experta import Rule, NOT, MATCH, AS

from shadycompass.config import ToolCategory, ToolRecommended
from shadycompass.facts import ScanNeeded, ScanPresent, CVE
from shadycompass.rules.irules import IRules


class CveExploitSearch(IRules, ABC):
    @Rule(
        CVE(cve=MATCH.cve, addr=MATCH.addr, port=MATCH.port),
        NOT(ScanPresent(category=ToolCategory.cve_exploit_search, addr=MATCH.addr, port=MATCH.port,
                        cve=MATCH.cve)),
        salience=100
    )
    def need_cve_exploit_search(self, cve: str, addr: str, port: int):
        self.declare(ScanNeeded(category=ToolCategory.cve_exploit_search, addr=addr, port=port, cve=cve))

    @Rule(
        AS.f1 << ScanNeeded(category=ToolCategory.cve_exploit_search, addr=MATCH.addr, port=MATCH.port, cve=MATCH.cve),
        ScanPresent(category=ToolCategory.cve_exploit_search, addr=MATCH.addr, port=MATCH.port, cve=MATCH.cve),
    )
    def do_not_need_cve_exploit_search(self, f1: ScanNeeded):
        self.retract(f1)

    @Rule(
        AS.f1 << ToolRecommended(category=ToolCategory.cve_exploit_search, addr=MATCH.addr, port=MATCH.port,
                                 cve=MATCH.cve),
        ScanPresent(category=ToolCategory.cve_exploit_search, addr=MATCH.addr, port=MATCH.port, cve=MATCH.cve),
    )
    def retract_cve_exploit_search_tool(self, f1: ToolRecommended):
        self.retract(f1)
