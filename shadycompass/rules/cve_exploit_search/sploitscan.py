from abc import ABC

from experta import DefFacts, Rule, AS

from shadycompass import ToolAvailable
from shadycompass.config import ToolCategory
from shadycompass.facts import ScanNeeded
from shadycompass.rules.conditions import TOOL_PREF, TOOL_CONF
from shadycompass.rules.irules import IRules


class SploitscanRules(IRules, ABC):
    sploitscan_tool_name = 'sploitscan'

    @DefFacts()
    def sploitscan_available(self):
        yield ToolAvailable(
            category=ToolCategory.cve_exploit_search,
            name=self.sploitscan_tool_name,
            tool_links=[
                'https://github.com/xaitax/SploitScan',
                'https://www.kali.org/tools/sploitscan/',
            ],
        )

    def _declare_sploit_scan(self, f1: ScanNeeded):
        cve = f1.get('cve')
        assert cve
        command_line = self.resolve_command_line(
            self.sploitscan_tool_name,
            [
                '--export', 'json',
            ],
        )
        command_line.extend([cve])
        self.recommend_tool(
            category=ToolCategory.cve_exploit_search,
            name=self.sploitscan_tool_name,
            variant=cve,
            command_line=command_line,
            addr=f1.get_addr(),
            port=f1.get_port(),
        )

    @Rule(
        AS.f1 << ScanNeeded(category=ToolCategory.cve_exploit_search),
        TOOL_PREF(ToolCategory.dns_scanner, sploitscan_tool_name),
        TOOL_CONF(ToolCategory.dns_scanner, sploitscan_tool_name),
    )
    def run_sploitscan(self, f1: ScanNeeded):
        self._declare_sploit_scan(f1)
