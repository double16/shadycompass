from shadycompass import ToolRecommended
from shadycompass.config import ToolCategory, PreferredTool, SECTION_OPTIONS
from shadycompass.facts import ScanNeeded, CVE
from shadycompass.rules.cve_exploit_search.sploitscan import SploitscanRules
from tests.rules.base import RulesBase
from tests.tests import assertFactIn


class SploitscanTest(RulesBase):

    def __init__(self, methodName: str = ...):
        super().__init__(['/dev/null'], methodName)
        self.cve_fact_one = CVE(cve='CVE-1970-99999', addr='10.1.1.1', port=8080)
        self.cve_fact_two = CVE(cve='CVE-1971-99999', addr='10.1.1.1', port=8081)
        self.tool_fact_one = ToolRecommended(
            category=ToolCategory.cve_exploit_search,
            name=SploitscanRules.sploitscan_tool_name,
            command_line=['--export', 'json', self.cve_fact_one.get_cve()],
            addr='10.1.1.1',
            port=8080
        )
        self.tool_fact_two = ToolRecommended(
            category=ToolCategory.cve_exploit_search,
            name=SploitscanRules.sploitscan_tool_name,
            command_line=['--export', 'json', self.cve_fact_two.get_cve()],
            addr='10.1.1.1',
            port=8081
        )

    def test_found_cve_recommend_sploitscan_one(self):
        self.engine.declare(
            PreferredTool(category=ToolCategory.cve_exploit_search, name=SploitscanRules.sploitscan_tool_name))
        self.engine.declare(self.cve_fact_one)
        self.engine.run()
        assertFactIn(
            ScanNeeded(category=ToolCategory.cve_exploit_search, cve=self.cve_fact_one.get_cve(), addr='10.1.1.1',
                       port=8080), self.engine)
        assertFactIn(self.tool_fact_one, self.engine)

    def test_found_cve_recommend_sploitscan_two(self):
        self.engine.declare(
            PreferredTool(category=ToolCategory.cve_exploit_search, name=SploitscanRules.sploitscan_tool_name))
        self.engine.declare(self.cve_fact_one)
        self.engine.declare(self.cve_fact_two)
        self.engine.run()
        assertFactIn(
            ScanNeeded(category=ToolCategory.cve_exploit_search, cve=self.cve_fact_one.get_cve(), addr='10.1.1.1',
                       port=8080), self.engine)
        assertFactIn(self.tool_fact_one, self.engine)
        assertFactIn(
            ScanNeeded(category=ToolCategory.cve_exploit_search, cve=self.cve_fact_two.get_cve(), addr='10.1.1.1',
                       port=8081), self.engine)
        assertFactIn(self.tool_fact_two, self.engine)

    def test_found_cve_recommend_sploitscan_options(self):
        self.engine.reset()
        self.engine.declare(
            PreferredTool(category=ToolCategory.cve_exploit_search, name=SploitscanRules.sploitscan_tool_name))
        self.engine.config_set(SECTION_OPTIONS, SploitscanRules.sploitscan_tool_name, '--debug', True)
        self.engine.declare(self.cve_fact_one)
        self.engine.run()
        assertFactIn(ToolRecommended(
            category=ToolCategory.cve_exploit_search,
            name=SploitscanRules.sploitscan_tool_name,
            command_line=['--export', 'json', '--debug', self.cve_fact_one.get_cve()],
            addr='10.1.1.1',
            port=8080
        ), self.engine)
